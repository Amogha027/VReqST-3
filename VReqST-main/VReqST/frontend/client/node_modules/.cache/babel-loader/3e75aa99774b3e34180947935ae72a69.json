{"ast":null,"code":"var _jsxFileName = \"/home/amogha/btp-2/VReqST-2/VReqST-main/VReqST/frontend/client/src/Components/Sample/sample.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Stack from './Stack'; // Helper function to flatten the JSON structure\n\nconst flattenJson = (data, parentKey = '') => {\n  let flattened = {};\n  Object.keys(data).forEach(key => {\n    const newKey = parentKey ? `${parentKey}.${key}` : key;\n\n    if (typeof data[key] === 'object' && !Array.isArray(data[key])) {\n      Object.assign(flattened, flattenJson(data[key], newKey));\n    } else {\n      flattened[newKey] = data[key];\n    }\n  });\n  return flattened;\n}; // Helper function to unflatten the JSON structure\n\n\nconst unflattenJson = data => {\n  const result = {};\n  Object.keys(data).forEach(key => {\n    const keys = key.split('.');\n    keys.reduce((acc, value, index) => {\n      if (index === keys.length - 1) {\n        acc[value] = data[key];\n      } else {\n        if (!acc[value]) {\n          acc[value] = {};\n        }\n      }\n\n      return acc[value];\n    }, result);\n  });\n  return result;\n};\n\nconst QuestionForm = ({\n  initialJson,\n  validatorFile\n}) => {\n  const [formData, setFormData] = useState({});\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [error, setError] = useState(\"\"); // Load the JSON file, flatten it, and frame questions using the validator\n\n  useEffect(() => {\n    if (initialJson && validatorFile) {\n      // Flatten the initial JSON structure\n      const flattenedJson = flattenJson(initialJson);\n      console.log(flattenedJson); //   console.log(flattenedJson['four'][0])\n\n      let ll = flattenedJson['four'][0];\n      let cpy = flattenedJson;\n      cpy['four'].push(ll);\n      console.log(cpy);\n      setFormData(flattenedJson); // Generate questions from the validatorFile's 'query' field\n\n      const generatedQuestions = Object.keys(flattenedJson).map(key => {\n        var _validatorFile$key, _validatorFile$key2;\n\n        return {\n          key,\n          query: ((_validatorFile$key = validatorFile[key]) === null || _validatorFile$key === void 0 ? void 0 : _validatorFile$key.query) || key,\n          typeof: ((_validatorFile$key2 = validatorFile[key]) === null || _validatorFile$key2 === void 0 ? void 0 : _validatorFile$key2.typeof) || 'string'\n        };\n      });\n      console.log(generatedQuestions);\n      setQuestions(generatedQuestions);\n    }\n  }, [initialJson, validatorFile]); // Function to validate the answer\n\n  const validateAnswer = (answer, type) => {\n    switch (type) {\n      case 'string':\n        return typeof answer === 'string';\n\n      case 'number':\n        return !isNaN(answer);\n\n      case 'boolean':\n        return answer.toLowerCase() === 'true' || answer.toLowerCase() === 'false';\n\n      default:\n        return false;\n    }\n  }; // Function to handle the form submission and move to the next question\n\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const input = event.target.elements.questionInput.value;\n    const currentType = questions[currentQuestion].typeof; // Validate the input based on the 'typeof' field\n\n    if (!validateAnswer(input, currentType)) {\n      setError(`Invalid input! Expected a ${currentType}.`);\n      return;\n    }\n\n    setError(\"\");\n\n    if (questions[currentQuestion].typeof === \"object\") {\n      console.log(questions[currentQuestion]);\n    } // Update the form data\n\n\n    setFormData({ ...formData,\n      [questions[currentQuestion].key]: input\n    }); // Move to the next question\n\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, currentQuestion < questions.length ? React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"What is \", questions[currentQuestion].query, \"?\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"questionInput\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Next\"), error && React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, error)) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Thank you! Here is the filled JSON:\"), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, JSON.stringify(unflattenJson(formData), null, 2))));\n}; // Usage of QuestionForm with nested JSON and the validator file\n\n\nconst Sample = () => {\n  const initialJson = {\n    \"one\": \"\",\n    \"two\": \"\",\n    \"three\": {\n      \"t-one\": \"\",\n      \"t-two\": \"\"\n    },\n    \"four\": [{\n      \"f-one\": \"\",\n      \"f-two\": \"\"\n    }]\n  };\n  const validatorFile = {\n    \"one\": {\n      typeof: \"string\",\n      query: \"value of one\"\n    },\n    two: {\n      typeof: \"string\",\n      query: \"value of two\"\n    },\n    \"t-one\": {\n      typeof: \"string\",\n      query: \"value of t-one\"\n    },\n    \"t-two\": {\n      typeof: \"string\",\n      query: \"value of t-two\"\n    }\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"Dynamic JSON Validator Questionnaire\"), React.createElement(QuestionForm, {\n    initialJson: initialJson,\n    validatorFile: validatorFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }));\n};\n\nexport default Sample;","map":{"version":3,"sources":["/home/amogha/btp-2/VReqST-2/VReqST-main/VReqST/frontend/client/src/Components/Sample/sample.jsx"],"names":["React","useState","useEffect","Stack","flattenJson","data","parentKey","flattened","Object","keys","forEach","key","newKey","Array","isArray","assign","unflattenJson","result","split","reduce","acc","value","index","length","QuestionForm","initialJson","validatorFile","formData","setFormData","questions","setQuestions","currentQuestion","setCurrentQuestion","error","setError","flattenedJson","console","log","ll","cpy","push","generatedQuestions","map","query","typeof","validateAnswer","answer","type","isNaN","toLowerCase","handleSubmit","event","preventDefault","input","target","elements","questionInput","currentType","color","JSON","stringify","Sample","two"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Stack from './Stack';\n\n// Helper function to flatten the JSON structure\nconst flattenJson = (data, parentKey = '') => {\n  let flattened = {};\n  Object.keys(data).forEach(key => {\n    const newKey = parentKey ? `${parentKey}.${key}` : key;\n    if (typeof data[key] === 'object' && !Array.isArray(data[key])) {\n      Object.assign(flattened, flattenJson(data[key], newKey));\n    } else {\n      flattened[newKey] = data[key];\n    }\n  });\n  return flattened;\n};\n\n// Helper function to unflatten the JSON structure\nconst unflattenJson = (data) => {\n  const result = {};\n  Object.keys(data).forEach((key) => {\n    const keys = key.split('.');\n    keys.reduce((acc, value, index) => {\n      if (index === keys.length - 1) {\n        acc[value] = data[key];\n      } else {\n        if (!acc[value]) {\n          acc[value] = {};\n        }\n      }\n      return acc[value];\n    }, result);\n  });\n  return result;\n};\n\nconst QuestionForm = ({ initialJson, validatorFile }) => {\n  const [formData, setFormData] = useState({});\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [error, setError] = useState(\"\");\n\n  // Load the JSON file, flatten it, and frame questions using the validator\n  useEffect(() => {\n    if (initialJson && validatorFile) {\n      // Flatten the initial JSON structure\n      const flattenedJson = flattenJson(initialJson);\n      console.log(flattenedJson)\n    //   console.log(flattenedJson['four'][0])\n      let ll = flattenedJson['four'][0]\n      let cpy = flattenedJson;\n      cpy['four'].push(ll);\n      console.log(cpy)\n      setFormData(flattenedJson);\n\n      // Generate questions from the validatorFile's 'query' field\n      const generatedQuestions = Object.keys(flattenedJson).map(key => ({\n        key,\n        query: validatorFile[key]?.query || key,\n        typeof: validatorFile[key]?.typeof || 'string'\n      }));\n      console.log(generatedQuestions)\n      setQuestions(generatedQuestions);\n    }\n  }, [initialJson, validatorFile]);\n\n  // Function to validate the answer\n  const validateAnswer = (answer, type) => {\n    switch (type) {\n      case 'string':\n        return typeof answer === 'string';\n      case 'number':\n        return !isNaN(answer);\n      case 'boolean':\n        return answer.toLowerCase() === 'true' || answer.toLowerCase() === 'false';\n      default:\n        return false;\n    }\n  };\n\n  // Function to handle the form submission and move to the next question\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const input = event.target.elements.questionInput.value;\n    const currentType = questions[currentQuestion].typeof;\n\n    // Validate the input based on the 'typeof' field\n    if (!validateAnswer(input, currentType)) {\n      setError(`Invalid input! Expected a ${currentType}.`);\n      return;\n    }\n\n    setError(\"\");\n\n    if (questions[currentQuestion].typeof === \"object\") {\n        console.log(questions[currentQuestion])\n    }\n\n    // Update the form data\n    setFormData({\n      ...formData,\n      [questions[currentQuestion].key]: input\n    });\n\n    // Move to the next question\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  return (\n    <div>\n      {currentQuestion < questions.length ? (\n        <form onSubmit={handleSubmit}>\n          <label>\n            What is {questions[currentQuestion].query}?\n          </label>\n          <input\n            type=\"text\"\n            name=\"questionInput\"\n            required\n          />\n          <button type=\"submit\">Next</button>\n          {error && <p style={{ color: 'red' }}>{error}</p>}\n        </form>\n      ) : (\n        <div>\n          <h3>Thank you! Here is the filled JSON:</h3>\n          <pre>{JSON.stringify(unflattenJson(formData), null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Usage of QuestionForm with nested JSON and the validator file\nconst Sample = () => {\n  const initialJson = {\n    \"one\":\"\",\n    \"two\":\"\",\n    \"three\": {\n        \"t-one\": \"\",\n        \"t-two\": \"\"\n    },\n    \"four\": [\n        {\n            \"f-one\": \"\",\n            \"f-two\": \"\"\n        }\n    ]\n};\n\n  const validatorFile = {\n    \"one\": {\n      typeof: \"string\",\n      query: \"value of one\"\n    },\n    two: {\n      typeof: \"string\",\n      query: \"value of two\"\n    },\n    \"t-one\": {\n      typeof: \"string\",\n      query: \"value of t-one\"\n    },\n    \"t-two\": {\n      typeof: \"string\",\n      query: \"value of t-two\"\n    }\n  };\n\n  return (\n    <div>\n      <h1>Dynamic JSON Validator Questionnaire</h1>\n      <QuestionForm initialJson={initialJson} validatorFile={validatorFile} />\n    </div>\n  );\n};\n\nexport default Sample;\n"]},"metadata":{},"sourceType":"module"}