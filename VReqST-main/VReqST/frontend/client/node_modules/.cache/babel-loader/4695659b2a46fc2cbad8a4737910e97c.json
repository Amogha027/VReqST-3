{"ast":null,"code":"var _jsxFileName = \"/home/amogha/btp-2/VReqST-2/VReqST-main/VReqST/frontend/client/src/Components/Sample/sample.jsx\";\nimport React, { useState, useEffect } from 'react'; // Helper function to flatten JSON structure\n\nconst flattenJson = (data, parentKey = '') => {\n  let flattened = {};\n  Object.keys(data).forEach(key => {\n    const newKey = parentKey ? `${parentKey}.${key}` : key;\n\n    if (Array.isArray(data[key])) {\n      flattened[newKey] = data[key];\n    } else if (typeof data[key] === 'object' && data[key] !== null) {\n      Object.assign(flattened, flattenJson(data[key], newKey));\n    } else {\n      flattened[newKey] = data[key];\n    }\n  });\n  return flattened;\n}; // Helper function to unflatten JSON structure\n\n\nconst unflattenJson = data => {\n  const result = {};\n  Object.keys(data).forEach(key => {\n    const keys = key.split('.');\n    keys.reduce((acc, value, index) => {\n      if (index === keys.length - 1) {\n        acc[value] = data[key];\n      } else {\n        if (!acc[value]) {\n          acc[value] = {};\n        }\n      }\n\n      return acc[value];\n    }, result);\n  });\n  return result;\n};\n\nconst QuestionForm = ({\n  initialJson,\n  validatorFile\n}) => {\n  var _listFields, _questions$currentQue;\n\n  const [formData, setFormData] = useState({});\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [error, setError] = useState(\"\");\n  const [listItemCount, setListItemCount] = useState(null);\n  const [currentListIndex, setCurrentListIndex] = useState(0);\n  const [currentListItemIndex, setCurrentListItemIndex] = useState(0);\n  const [listFields, setListFields] = useState([]); // Load the JSON file, flatten it, and frame questions using the validator\n\n  useEffect(() => {\n    if (initialJson && validatorFile) {\n      const flattenedJson = flattenJson(initialJson);\n      setFormData(flattenedJson);\n      const generatedQuestions = Object.keys(flattenedJson).map(key => {\n        var _validatorFile$key, _validatorFile$key2;\n\n        return {\n          key,\n          query: ((_validatorFile$key = validatorFile[key]) === null || _validatorFile$key === void 0 ? void 0 : _validatorFile$key.query) || key,\n          typeof: ((_validatorFile$key2 = validatorFile[key]) === null || _validatorFile$key2 === void 0 ? void 0 : _validatorFile$key2.typeof) || 'string'\n        };\n      });\n      setQuestions(generatedQuestions);\n    }\n  }, [initialJson, validatorFile]); // Function to validate the answer\n\n  const validateAnswer = (answer, type) => {\n    switch (type) {\n      case 'string':\n        return typeof answer === 'string';\n\n      case 'number':\n        return !isNaN(answer);\n\n      case 'boolean':\n        return answer.toLowerCase() === 'true' || answer.toLowerCase() === 'false';\n\n      case 'object':\n        return Number.isInteger(Number(answer)) && Number(answer) > 0;\n\n      default:\n        return false;\n    }\n  }; // Function to handle form submission and move to the next question\n\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const input = event.target.elements.questionInput.value;\n    const currentQuestion = questions[currentQuestionIndex];\n    const currentKey = currentQuestion.key;\n    const currentType = currentQuestion.typeof; // Handling the number of objects in a list (object type)\n\n    if (currentType === 'object' && !listItemCount) {\n      const isValid = validateAnswer(input, 'object');\n\n      if (!isValid) {\n        setError(`Invalid input! Please enter a valid number.`);\n        return;\n      }\n\n      setError(\"\");\n      setListItemCount(Number(input)); // Extract list fields from the validator file\n\n      const parentKey = currentKey.split(\".\")[0];\n      const listFieldKeys = Object.keys(validatorFile).filter(key => key.startsWith(parentKey + \".\") && key.split(\".\").length === 2);\n      setListFields(listFieldKeys);\n      setCurrentListIndex(0); // Start asking for the list items\n    } // Handling fields of the objects in the list\n    else if (listItemCount && currentListIndex < listItemCount) {\n        const arrayKey = currentKey.split(\".\")[0]; // Extract parent key (like \"four\")\n\n        const arrayData = formData[arrayKey] || [];\n\n        if (!arrayData[currentListIndex]) {\n          arrayData[currentListIndex] = {};\n        }\n\n        const fieldKey = listFields[currentQuestionIndex % listFields.length].split(\".\")[1]; // Get current field key dynamically\n\n        arrayData[currentListIndex][fieldKey] = input;\n        setFormData({ ...formData,\n          [arrayKey]: arrayData\n        }); // Move to the next list item or next question\n\n        if ((currentQuestionIndex + 1) % listFields.length === 0) {\n          setCurrentListIndex(currentListIndex + 1);\n        }\n\n        if (currentListIndex >= listItemCount - 1 && currentQuestionIndex % listFields.length === listFields.length - 1) {\n          setListItemCount(null);\n          setCurrentQuestionIndex(currentQuestionIndex + 1);\n        } else {\n          setCurrentQuestionIndex(currentQuestionIndex + 1);\n        }\n      } else {\n        // Normal field validation\n        if (!validateAnswer(input, currentType)) {\n          setError(`Invalid input! Expected a ${currentType}.`);\n          return;\n        }\n\n        setError(\"\"); // Update the form data\n\n        setFormData({ ...formData,\n          [currentKey]: input\n        }); // Move to the next question\n\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, currentQuestionIndex < questions.length ? React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, listItemCount ? `What is ${(_listFields = listFields[currentQuestionIndex % listFields.length]) === null || _listFields === void 0 ? void 0 : _listFields.split(\".\")[1]} for item ${currentListIndex + 1}?` : `What is ${(_questions$currentQue = questions[currentQuestionIndex]) === null || _questions$currentQue === void 0 ? void 0 : _questions$currentQue.query}?`), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"questionInput\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Next\"), error && React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, error)) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"Thank you! Here is the filled JSON:\"), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, JSON.stringify(unflattenJson(formData), null, 2))));\n}; // Usage of QuestionForm with dynamic JSON and the validator file\n\n\nconst App = () => {\n  const initialJson = {\n    one: \"\",\n    two: \"\",\n    three: {\n      \"t-one\": \"\",\n      \"t-two\": \"\"\n    },\n    four: [{\n      \"f-one\": \"\",\n      \"f-two\": \"\"\n    }]\n  };\n  const validatorFile = {\n    one: {\n      typeof: \"string\",\n      query: \"value of one\"\n    },\n    two: {\n      typeof: \"string\",\n      query: \"value of two\"\n    },\n    \"t-one\": {\n      typeof: \"string\",\n      query: \"value of t-one\"\n    },\n    \"t-two\": {\n      typeof: \"string\",\n      query: \"value of t-two\"\n    },\n    four: {\n      typeof: \"object\",\n      query: \"number of fours\"\n    },\n    \"f-one\": {\n      typeof: \"string\",\n      query: \"value of f-one\"\n    },\n    \"f-two\": {\n      typeof: \"string\",\n      query: \"value of f-two\"\n    }\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"Dynamic JSON Validator Questionnaire\"), React.createElement(QuestionForm, {\n    initialJson: initialJson,\n    validatorFile: validatorFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/amogha/btp-2/VReqST-2/VReqST-main/VReqST/frontend/client/src/Components/Sample/sample.jsx"],"names":["React","useState","useEffect","flattenJson","data","parentKey","flattened","Object","keys","forEach","key","newKey","Array","isArray","assign","unflattenJson","result","split","reduce","acc","value","index","length","QuestionForm","initialJson","validatorFile","formData","setFormData","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","error","setError","listItemCount","setListItemCount","currentListIndex","setCurrentListIndex","currentListItemIndex","setCurrentListItemIndex","listFields","setListFields","flattenedJson","generatedQuestions","map","query","typeof","validateAnswer","answer","type","isNaN","toLowerCase","Number","isInteger","handleSubmit","event","preventDefault","input","target","elements","questionInput","currentQuestion","currentKey","currentType","isValid","listFieldKeys","filter","startsWith","arrayKey","arrayData","fieldKey","color","JSON","stringify","App","one","two","three","four"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,SAAS,GAAG,EAAnB,KAA0B;AAC5C,MAAIC,SAAS,GAAG,EAAhB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,OAAlB,CAA0BC,GAAG,IAAI;AAC/B,UAAMC,MAAM,GAAGN,SAAS,GAAI,GAAEA,SAAU,IAAGK,GAAI,EAAvB,GAA2BA,GAAnD;;AACA,QAAIE,KAAK,CAACC,OAAN,CAAcT,IAAI,CAACM,GAAD,CAAlB,CAAJ,EAA8B;AAC5BJ,MAAAA,SAAS,CAACK,MAAD,CAAT,GAAoBP,IAAI,CAACM,GAAD,CAAxB;AACD,KAFD,MAEO,IAAI,OAAON,IAAI,CAACM,GAAD,CAAX,KAAqB,QAArB,IAAiCN,IAAI,CAACM,GAAD,CAAJ,KAAc,IAAnD,EAAyD;AAC9DH,MAAAA,MAAM,CAACO,MAAP,CAAcR,SAAd,EAAyBH,WAAW,CAACC,IAAI,CAACM,GAAD,CAAL,EAAYC,MAAZ,CAApC;AACD,KAFM,MAEA;AACLL,MAAAA,SAAS,CAACK,MAAD,CAAT,GAAoBP,IAAI,CAACM,GAAD,CAAxB;AACD;AACF,GATD;AAUA,SAAOJ,SAAP;AACD,CAbD,C,CAeA;;;AACA,MAAMS,aAAa,GAAIX,IAAD,IAAU;AAC9B,QAAMY,MAAM,GAAG,EAAf;AACAT,EAAAA,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,OAAlB,CAA2BC,GAAD,IAAS;AACjC,UAAMF,IAAI,GAAGE,GAAG,CAACO,KAAJ,CAAU,GAAV,CAAb;AACAT,IAAAA,IAAI,CAACU,MAAL,CAAY,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,KAAuB;AACjC,UAAIA,KAAK,KAAKb,IAAI,CAACc,MAAL,GAAc,CAA5B,EAA+B;AAC7BH,QAAAA,GAAG,CAACC,KAAD,CAAH,GAAahB,IAAI,CAACM,GAAD,CAAjB;AACD,OAFD,MAEO;AACL,YAAI,CAACS,GAAG,CAACC,KAAD,CAAR,EAAiB;AACfD,UAAAA,GAAG,CAACC,KAAD,CAAH,GAAa,EAAb;AACD;AACF;;AACD,aAAOD,GAAG,CAACC,KAAD,CAAV;AACD,KATD,EASGJ,MATH;AAUD,GAZD;AAaA,SAAOA,MAAP;AACD,CAhBD;;AAkBA,MAAMO,YAAY,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAAoC;AAAA;;AACvD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC2B,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC6B,oBAAD,EAAuBC,uBAAvB,IAAkD9B,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM,CAAC+B,KAAD,EAAQC,QAAR,IAAoBhC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACiC,aAAD,EAAgBC,gBAAhB,IAAoClC,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACmC,gBAAD,EAAmBC,mBAAnB,IAA0CpC,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAACqC,oBAAD,EAAuBC,uBAAvB,IAAkDtC,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM,CAACuC,UAAD,EAAaC,aAAb,IAA8BxC,QAAQ,CAAC,EAAD,CAA5C,CARuD,CAUvD;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,WAAW,IAAIC,aAAnB,EAAkC;AAChC,YAAMiB,aAAa,GAAGvC,WAAW,CAACqB,WAAD,CAAjC;AACAG,MAAAA,WAAW,CAACe,aAAD,CAAX;AAEA,YAAMC,kBAAkB,GAAGpC,MAAM,CAACC,IAAP,CAAYkC,aAAZ,EAA2BE,GAA3B,CAA+BlC,GAAG;AAAA;;AAAA,eAAK;AAChEA,UAAAA,GADgE;AAEhEmC,UAAAA,KAAK,EAAE,uBAAApB,aAAa,CAACf,GAAD,CAAb,0EAAoBmC,KAApB,KAA6BnC,GAF4B;AAGhEoC,UAAAA,MAAM,EAAE,wBAAArB,aAAa,CAACf,GAAD,CAAb,4EAAoBoC,MAApB,KAA8B;AAH0B,SAAL;AAAA,OAAlC,CAA3B;AAKAjB,MAAAA,YAAY,CAACc,kBAAD,CAAZ;AACD;AACF,GAZQ,EAYN,CAACnB,WAAD,EAAcC,aAAd,CAZM,CAAT,CAXuD,CAyBvD;;AACA,QAAMsB,cAAc,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AACvC,YAAQA,IAAR;AACE,WAAK,QAAL;AACE,eAAO,OAAOD,MAAP,KAAkB,QAAzB;;AACF,WAAK,QAAL;AACE,eAAO,CAACE,KAAK,CAACF,MAAD,CAAb;;AACF,WAAK,SAAL;AACE,eAAOA,MAAM,CAACG,WAAP,OAAyB,MAAzB,IAAmCH,MAAM,CAACG,WAAP,OAAyB,OAAnE;;AACF,WAAK,QAAL;AACE,eAAOC,MAAM,CAACC,SAAP,CAAiBD,MAAM,CAACJ,MAAD,CAAvB,KAAoCI,MAAM,CAACJ,MAAD,CAAN,GAAiB,CAA5D;;AACF;AACE,eAAO,KAAP;AAVJ;AAYD,GAbD,CA1BuD,CAyCvD;;;AACA,QAAMM,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,QAAb,CAAsBC,aAAtB,CAAoCxC,KAAlD;AACA,UAAMyC,eAAe,GAAGjC,SAAS,CAACE,oBAAD,CAAjC;AACA,UAAMgC,UAAU,GAAGD,eAAe,CAACnD,GAAnC;AACA,UAAMqD,WAAW,GAAGF,eAAe,CAACf,MAApC,CAL8B,CAO9B;;AACA,QAAIiB,WAAW,KAAK,QAAhB,IAA4B,CAAC7B,aAAjC,EAAgD;AAC9C,YAAM8B,OAAO,GAAGjB,cAAc,CAACU,KAAD,EAAQ,QAAR,CAA9B;;AACA,UAAI,CAACO,OAAL,EAAc;AACZ/B,QAAAA,QAAQ,CAAE,6CAAF,CAAR;AACA;AACD;;AACDA,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,gBAAgB,CAACiB,MAAM,CAACK,KAAD,CAAP,CAAhB,CAP8C,CAS9C;;AACA,YAAMpD,SAAS,GAAGyD,UAAU,CAAC7C,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAlB;AACA,YAAMgD,aAAa,GAAG1D,MAAM,CAACC,IAAP,CAAYiB,aAAZ,EAA2ByC,MAA3B,CAAkCxD,GAAG,IAAIA,GAAG,CAACyD,UAAJ,CAAe9D,SAAS,GAAG,GAA3B,KAAmCK,GAAG,CAACO,KAAJ,CAAU,GAAV,EAAeK,MAAf,KAA0B,CAAtG,CAAtB;AACAmB,MAAAA,aAAa,CAACwB,aAAD,CAAb;AACA5B,MAAAA,mBAAmB,CAAC,CAAD,CAAnB,CAb8C,CAatB;AACzB,KAdD,CAeA;AAfA,SAgBK,IAAIH,aAAa,IAAIE,gBAAgB,GAAGF,aAAxC,EAAuD;AAC1D,cAAMkC,QAAQ,GAAGN,UAAU,CAAC7C,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAjB,CAD0D,CACf;;AAC3C,cAAMoD,SAAS,GAAG3C,QAAQ,CAAC0C,QAAD,CAAR,IAAsB,EAAxC;;AAEA,YAAI,CAACC,SAAS,CAACjC,gBAAD,CAAd,EAAkC;AAChCiC,UAAAA,SAAS,CAACjC,gBAAD,CAAT,GAA8B,EAA9B;AACD;;AAED,cAAMkC,QAAQ,GAAG9B,UAAU,CAACV,oBAAoB,GAAGU,UAAU,CAAClB,MAAnC,CAAV,CAAqDL,KAArD,CAA2D,GAA3D,EAAgE,CAAhE,CAAjB,CAR0D,CAQ2B;;AACrFoD,QAAAA,SAAS,CAACjC,gBAAD,CAAT,CAA4BkC,QAA5B,IAAwCb,KAAxC;AAEA9B,QAAAA,WAAW,CAAC,EACV,GAAGD,QADO;AAEV,WAAC0C,QAAD,GAAYC;AAFF,SAAD,CAAX,CAX0D,CAgB1D;;AACA,YAAI,CAACvC,oBAAoB,GAAG,CAAxB,IAA6BU,UAAU,CAAClB,MAAxC,KAAmD,CAAvD,EAA0D;AACxDe,UAAAA,mBAAmB,CAACD,gBAAgB,GAAG,CAApB,CAAnB;AACD;;AAED,YAAIA,gBAAgB,IAAIF,aAAa,GAAG,CAApC,IAAyCJ,oBAAoB,GAAGU,UAAU,CAAClB,MAAlC,KAA6CkB,UAAU,CAAClB,MAAX,GAAoB,CAA9G,EAAiH;AAC/Ga,UAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAJ,UAAAA,uBAAuB,CAACD,oBAAoB,GAAG,CAAxB,CAAvB;AACD,SAHD,MAGO;AACLC,UAAAA,uBAAuB,CAACD,oBAAoB,GAAG,CAAxB,CAAvB;AACD;AACF,OA3BI,MA2BE;AACL;AACA,YAAI,CAACiB,cAAc,CAACU,KAAD,EAAQM,WAAR,CAAnB,EAAyC;AACvC9B,UAAAA,QAAQ,CAAE,6BAA4B8B,WAAY,GAA1C,CAAR;AACA;AACD;;AACD9B,QAAAA,QAAQ,CAAC,EAAD,CAAR,CANK,CAOL;;AACAN,QAAAA,WAAW,CAAC,EACV,GAAGD,QADO;AAEV,WAACoC,UAAD,GAAcL;AAFJ,SAAD,CAAX,CARK,CAYL;;AACA1B,QAAAA,uBAAuB,CAACD,oBAAoB,GAAG,CAAxB,CAAvB;AACD;AACF,GAlED;;AAoEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,oBAAoB,GAAGF,SAAS,CAACN,MAAjC,GACC;AAAM,IAAA,QAAQ,EAAEgC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpB,aAAa,GACT,WAAD,eAAWM,UAAU,CAACV,oBAAoB,GAAGU,UAAU,CAAClB,MAAnC,CAArB,gDAAW,YAAsDL,KAAtD,CAA4D,GAA5D,EAAiE,CAAjE,CAAoE,aAAYmB,gBAAgB,GAAG,CAAE,GADtG,GAET,WAAD,yBAAWR,SAAS,CAACE,oBAAD,CAApB,0DAAW,sBAAiCe,KAAM,GAHxD,CADF,EAME;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,eAFP;AAGE,IAAA,QAAQ,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAWE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,EAYGb,KAAK,IAAI;AAAG,IAAA,KAAK,EAAE;AAAEuC,MAAAA,KAAK,EAAE;AAAT,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BvC,KAA7B,CAZZ,CADD,GAgBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMwC,IAAI,CAACC,SAAL,CAAe1D,aAAa,CAACW,QAAD,CAA5B,EAAwC,IAAxC,EAA8C,CAA9C,CAAN,CAFF,CAjBJ,CADF;AAyBD,CAvID,C,CAyIA;;;AACA,MAAMgD,GAAG,GAAG,MAAM;AAChB,QAAMlD,WAAW,GAAG;AAClBmD,IAAAA,GAAG,EAAE,EADa;AAElBC,IAAAA,GAAG,EAAE,EAFa;AAGlBC,IAAAA,KAAK,EAAE;AACL,eAAS,EADJ;AAEL,eAAS;AAFJ,KAHW;AAOlBC,IAAAA,IAAI,EAAE,CACJ;AACE,eAAS,EADX;AAEE,eAAS;AAFX,KADI;AAPY,GAApB;AAeA,QAAMrD,aAAa,GAAG;AACpBkD,IAAAA,GAAG,EAAE;AACH7B,MAAAA,MAAM,EAAE,QADL;AAEHD,MAAAA,KAAK,EAAE;AAFJ,KADe;AAKpB+B,IAAAA,GAAG,EAAE;AACH9B,MAAAA,MAAM,EAAE,QADL;AAEHD,MAAAA,KAAK,EAAE;AAFJ,KALe;AASpB,aAAS;AACPC,MAAAA,MAAM,EAAE,QADD;AAEPD,MAAAA,KAAK,EAAE;AAFA,KATW;AAapB,aAAS;AACPC,MAAAA,MAAM,EAAE,QADD;AAEPD,MAAAA,KAAK,EAAE;AAFA,KAbW;AAiBpBiC,IAAAA,IAAI,EAAE;AACJhC,MAAAA,MAAM,EAAE,QADJ;AAEJD,MAAAA,KAAK,EAAE;AAFH,KAjBc;AAqBpB,aAAS;AACPC,MAAAA,MAAM,EAAE,QADD;AAEPD,MAAAA,KAAK,EAAE;AAFA,KArBW;AAyBpB,aAAS;AACPC,MAAAA,MAAM,EAAE,QADD;AAEPD,MAAAA,KAAK,EAAE;AAFA;AAzBW,GAAtB;AA+BA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,EAEE,oBAAC,YAAD;AAAc,IAAA,WAAW,EAAErB,WAA3B;AAAwC,IAAA,aAAa,EAAEC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CArDD;;AAuDA,eAAeiD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Helper function to flatten JSON structure\nconst flattenJson = (data, parentKey = '') => {\n  let flattened = {};\n  Object.keys(data).forEach(key => {\n    const newKey = parentKey ? `${parentKey}.${key}` : key;\n    if (Array.isArray(data[key])) {\n      flattened[newKey] = data[key];\n    } else if (typeof data[key] === 'object' && data[key] !== null) {\n      Object.assign(flattened, flattenJson(data[key], newKey));\n    } else {\n      flattened[newKey] = data[key];\n    }\n  });\n  return flattened;\n};\n\n// Helper function to unflatten JSON structure\nconst unflattenJson = (data) => {\n  const result = {};\n  Object.keys(data).forEach((key) => {\n    const keys = key.split('.');\n    keys.reduce((acc, value, index) => {\n      if (index === keys.length - 1) {\n        acc[value] = data[key];\n      } else {\n        if (!acc[value]) {\n          acc[value] = {};\n        }\n      }\n      return acc[value];\n    }, result);\n  });\n  return result;\n};\n\nconst QuestionForm = ({ initialJson, validatorFile }) => {\n  const [formData, setFormData] = useState({});\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [error, setError] = useState(\"\");\n  const [listItemCount, setListItemCount] = useState(null);\n  const [currentListIndex, setCurrentListIndex] = useState(0);\n  const [currentListItemIndex, setCurrentListItemIndex] = useState(0);\n  const [listFields, setListFields] = useState([]);\n\n  // Load the JSON file, flatten it, and frame questions using the validator\n  useEffect(() => {\n    if (initialJson && validatorFile) {\n      const flattenedJson = flattenJson(initialJson);\n      setFormData(flattenedJson);\n\n      const generatedQuestions = Object.keys(flattenedJson).map(key => ({\n        key,\n        query: validatorFile[key]?.query || key,\n        typeof: validatorFile[key]?.typeof || 'string'\n      }));\n      setQuestions(generatedQuestions);\n    }\n  }, [initialJson, validatorFile]);\n\n  // Function to validate the answer\n  const validateAnswer = (answer, type) => {\n    switch (type) {\n      case 'string':\n        return typeof answer === 'string';\n      case 'number':\n        return !isNaN(answer);\n      case 'boolean':\n        return answer.toLowerCase() === 'true' || answer.toLowerCase() === 'false';\n      case 'object':\n        return Number.isInteger(Number(answer)) && Number(answer) > 0;\n      default:\n        return false;\n    }\n  };\n\n  // Function to handle form submission and move to the next question\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const input = event.target.elements.questionInput.value;\n    const currentQuestion = questions[currentQuestionIndex];\n    const currentKey = currentQuestion.key;\n    const currentType = currentQuestion.typeof;\n\n    // Handling the number of objects in a list (object type)\n    if (currentType === 'object' && !listItemCount) {\n      const isValid = validateAnswer(input, 'object');\n      if (!isValid) {\n        setError(`Invalid input! Please enter a valid number.`);\n        return;\n      }\n      setError(\"\");\n      setListItemCount(Number(input));\n\n      // Extract list fields from the validator file\n      const parentKey = currentKey.split(\".\")[0];\n      const listFieldKeys = Object.keys(validatorFile).filter(key => key.startsWith(parentKey + \".\") && key.split(\".\").length === 2);\n      setListFields(listFieldKeys);\n      setCurrentListIndex(0); // Start asking for the list items\n    }\n    // Handling fields of the objects in the list\n    else if (listItemCount && currentListIndex < listItemCount) {\n      const arrayKey = currentKey.split(\".\")[0]; // Extract parent key (like \"four\")\n      const arrayData = formData[arrayKey] || [];\n\n      if (!arrayData[currentListIndex]) {\n        arrayData[currentListIndex] = {};\n      }\n\n      const fieldKey = listFields[currentQuestionIndex % listFields.length].split(\".\")[1]; // Get current field key dynamically\n      arrayData[currentListIndex][fieldKey] = input;\n\n      setFormData({\n        ...formData,\n        [arrayKey]: arrayData\n      });\n\n      // Move to the next list item or next question\n      if ((currentQuestionIndex + 1) % listFields.length === 0) {\n        setCurrentListIndex(currentListIndex + 1);\n      }\n\n      if (currentListIndex >= listItemCount - 1 && currentQuestionIndex % listFields.length === listFields.length - 1) {\n        setListItemCount(null);\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      } else {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    } else {\n      // Normal field validation\n      if (!validateAnswer(input, currentType)) {\n        setError(`Invalid input! Expected a ${currentType}.`);\n        return;\n      }\n      setError(\"\");\n      // Update the form data\n      setFormData({\n        ...formData,\n        [currentKey]: input\n      });\n      // Move to the next question\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  return (\n    <div>\n      {currentQuestionIndex < questions.length ? (\n        <form onSubmit={handleSubmit}>\n          <label>\n            {listItemCount\n              ? `What is ${listFields[currentQuestionIndex % listFields.length]?.split(\".\")[1]} for item ${currentListIndex + 1}?`\n              : `What is ${questions[currentQuestionIndex]?.query}?`}\n          </label>\n          <input\n            type=\"text\"\n            name=\"questionInput\"\n            required\n          />\n          <button type=\"submit\">Next</button>\n          {error && <p style={{ color: 'red' }}>{error}</p>}\n        </form>\n      ) : (\n        <div>\n          <h3>Thank you! Here is the filled JSON:</h3>\n          <pre>{JSON.stringify(unflattenJson(formData), null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Usage of QuestionForm with dynamic JSON and the validator file\nconst App = () => {\n  const initialJson = {\n    one: \"\",\n    two: \"\",\n    three: {\n      \"t-one\": \"\",\n      \"t-two\": \"\"\n    },\n    four: [\n      {\n        \"f-one\": \"\",\n        \"f-two\": \"\"\n      }\n    ]\n  };\n\n  const validatorFile = {\n    one: {\n      typeof: \"string\",\n      query: \"value of one\"\n    },\n    two: {\n      typeof: \"string\",\n      query: \"value of two\"\n    },\n    \"t-one\": {\n      typeof: \"string\",\n      query: \"value of t-one\"\n    },\n    \"t-two\": {\n      typeof: \"string\",\n      query: \"value of t-two\"\n    },\n    four: {\n      typeof: \"object\",\n      query: \"number of fours\"\n    },\n    \"f-one\": {\n      typeof: \"string\",\n      query: \"value of f-one\"\n    },\n    \"f-two\": {\n      typeof: \"string\",\n      query: \"value of f-two\"\n    }\n  };\n\n  return (\n    <div>\n      <h1>Dynamic JSON Validator Questionnaire</h1>\n      <QuestionForm initialJson={initialJson} validatorFile={validatorFile} />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}